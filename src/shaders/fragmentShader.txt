#version 400 core

const int MAX_RENDER_LIGHTS = 11;

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[MAX_RENDER_LIGHTS];
in vec3 toCameraVector;
in float visibility;
in vec4 shadowCoords;

out vec4 out_Colour;

uniform sampler2D textureSampler;
uniform sampler2D shadowMap;
uniform vec3 lightColour[MAX_RENDER_LIGHTS];
uniform vec3 attenuation[MAX_RENDER_LIGHTS];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;
uniform float shadowMapSize;

const int pcfCount = 2;
const float totalTexels = (pcfCount * 2.0 + 1.0) * (pcfCount * 2.0 + 1.0);

void main(void) {
	
	float texelSize = 1.0 / shadowMapSize;
	float total = 0.0;
	
	for(int x = -pcfCount; x<=pcfCount; x++) {
		for(int y = -pcfCount; y<=pcfCount; y++) {
			float objectNearestLight = texture(shadowMap, shadowCoords.xy + vec2(x,y) * texelSize).r;
			if(shadowCoords.z > objectNearestLight + 0.009) {
				total += 1.0;
			}
		}
	}
	
	total /= totalTexels;
	
	float lightFactor = 1.0 - (total * shadowCoords.w);
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 unitNormal = normalize(surfaceNormal);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i = 0; i < MAX_RENDER_LIGHTS; i++) {
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDot1 = dot(unitNormal, unitLightVector);
		float brightness = max(nDot1, 0.0);
		vec3 lightDirection = -unitVectorToCamera;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		totalDiffuse = totalDiffuse + (brightness * lightColour[i]) / attFactor;
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i]) / attFactor;
	}
	
	totalDiffuse = max(totalDiffuse * lightFactor, 0.2);
	
	vec4 textureColour = texture(textureSampler, pass_textureCoords);
	if(textureColour.a<0.5) {
		discard;
	}
	
	out_Colour = vec4(totalDiffuse, 1.0) * textureColour + vec4(totalSpecular, 1.0);
	out_Colour = mix(vec4(skyColour,1.0),out_Colour, visibility);
}